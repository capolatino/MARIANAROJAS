// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  role         Role     @default(ADMIN)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("users")
}

enum Role {
  ADMIN
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  phone     String
  consent   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]

  @@map("customers")
}

model Service {
  id             String    @id @default(cuid())
  name           String
  category       String    // "U침as" | "Pesta침as"
  durationMin    Int       // 45, 60, 90...
  price          Int       // ARS final
  depositPercent Int       // 10..50 (%)
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  bookings       Booking[]

  @@unique([name, category])
  @@map("services")
}

model Booking {
  id         String        @id @default(cuid())
  customerId String
  serviceId  String
  startsAt   DateTime
  endsAt     DateTime
  status     BookingStatus @default(PENDING_PAYMENT)
  note       String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  payment    Payment?
  customer   Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  service    Service       @relation(fields: [serviceId], references: [id])

  @@unique([startsAt, endsAt]) // evita superposici칩n exacta
  @@map("bookings")
}

enum BookingStatus {
  PENDING_PAYMENT
  CONFIRMED
  CANCELLED
  NO_SHOW
}

model Payment {
  id            String        @id @default(cuid())
  bookingId     String        @unique
  provider      String        @default("MERCADOPAGO")
  preferenceId  String?
  mpPaymentId   String?       // id de pago MP
  amount        Int           // monto se침a en ARS
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  booking       Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  REFUNDED
}

model AvailabilityBlock {
  id        String   @id @default(cuid())
  startsAt  DateTime
  endsAt    DateTime
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([startsAt, endsAt])
  @@map("availability_blocks")
}
